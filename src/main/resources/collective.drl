import kc.choice.PoolFee
import kc.choice.SubscriptionFee
import kc.choice.PoolAppropriatePay

import uk.ac.imperial.einst.access.RoleOf
import uk.ac.imperial.einst.vote.OpenBallot
import uk.ac.imperial.einst.vote.CloseBallot
import uk.ac.imperial.einst.vote.Ballot
import uk.ac.imperial.einst.vote.Issue
import uk.ac.imperial.einst.vote.Declare
import uk.ac.imperial.einst.vote.Vote
import uk.ac.imperial.einst.ipower.Obl

import java.lang.Math
import java.lang.Integer

global org.apache.log4j.Logger logger

rule "Force periodic vote"
	when
		T(eval(t % 10 == 1))
		$issue : Issue($cfv : cfvRoles, $i : inst)
		RoleOf($a : actor, inst == $i, $cfv contains role)
	then
		OpenBallot act = new OpenBallot($a, $i, $issue);
		insert( new Obl($a, act) );
		logger.info("obl("+ act +")");
end

rule "Close opened ballot"
	when
		T($t : t)
		OpenBallot(t < $t, $issue : issue, $i : inst, $a : actor)
		$b : Ballot( issue == $issue, status == Ballot.Status.OPEN )
	then
		CloseBallot act = new CloseBallot($a, $i, $b);
		insert( new Obl($a, act) );
		logger.info("obl("+ act +")");
end

rule "Change pool fees"
	when
		$issue : PoolFee($p : pool)
		Declare( ballot.issue == $issue, $w : winner, valid == true )
	then
		$issue.updateFee($w);
		// trigger recache of Pool
		modify($p) {}
end

rule "Change Subscription fees"
	when
		$issue : SubscriptionFee($i : inst)
		Declare( ballot.issue == $issue, $w : winner, valid == true )
	then
		$issue.updateFee($w);
		// trigger recache of inst
		modify($i) {}
end

rule "Change Appropriation fee"
	when
		$issue : PoolAppropriatePay($p : pool)
		Declare( ballot.issue == $issue, $w : winner, valid == true )
	then
		$issue.updateFee($w);
		modify($p) {}
end

rule "Set vote weight analyst-gatherers"
	salience 1000
	when
		CloseBallot( $b : ballot, valid == true )
		Issue( $i:inst, this == $b.issue, voteRoles contains "analyst", voteRoles contains "gatherer" )
		accumulate( Vote(ballot == $b, valid == true, $a: actor, $v:this) and RoleOf(actor == $a, inst == $i, role == "analyst");
			$aw : sum($v.getWeight()), $av : collectSet($v))
		accumulate( Vote(ballot == $b, valid == true, $a: actor, $v:this) and RoleOf(actor == $a, inst == $i, role == "gatherer");
			$gw : sum($v.getWeight()), $gv : collectSet($v))
	then
		//logger.info("Analysts: "+ $av +", weight= " + $aw);
		//logger.info("Gatherers: "+ $gv +", weight= " + $gw);
		if($aw.doubleValue() > 0 && $gw.doubleValue() > 0) {
			for(Object o : $av) {
				Vote v = (Vote) o;
				v.setWeight($gw.doubleValue() / $aw.doubleValue());
			}
		}
end

rule "Set vote weight analyst-consumers"
	salience 1000
	when
		CloseBallot( $b : ballot, valid == true )
		Issue( $i:inst, this == $b.issue, voteRoles contains "analyst", voteRoles contains "consumer" )
		accumulate( Vote(ballot == $b, valid == true, $a: actor, $v:this) and RoleOf(actor == $a, inst == $i, role == "analyst");
			$aw : sum($v.getWeight()), $av : collectSet($v))
		accumulate( Vote(ballot == $b, valid == true, $a: actor, $v:this) and RoleOf(actor == $a, inst == $i, role == "consumer");
			$cw : sum($v.getWeight()), $cv : collectSet($v))
	then
		logger.info("Analysts: "+ $av +", weight= " + $aw);
		logger.info("Consumers: "+ $cv +", weight= " + $cw);
		if($aw.doubleValue() > 0 && $cw.doubleValue() > 0) {
			for(Object o : $av) {
				Vote v = (Vote) o;
				v.setWeight($cw.doubleValue() / $aw.doubleValue());
			}
		}
end