import kc.DataInstitution
import kc.MeteredPool

import uk.ac.imperial.einst.Institution
import uk.ac.imperial.einst.access.RoleOf
import uk.ac.imperial.einst.ipower.Obl
import uk.ac.imperial.einst.micropay.Account
import uk.ac.imperial.einst.micropay.Transfer
import uk.ac.imperial.einst.resource.facility.Facility

import java.lang.Integer

global org.apache.log4j.Logger logger

declare Bankrupt
	inst : Institution
end

query isBankrupt(i)
	Bankrupt(i;)
end

rule "Institution Bankruptcy"
	salience -100
	when
		$acc : Account(balance < minValue, $i : holder, holder instanceof Institution)
	then
		logger.info($acc +" is bankrupt!");
		insert( new Bankrupt((Institution) $i));
end

rule "Revoke roles on bankruptcy"
	when
		Bankrupt($i : inst)
		$r : RoleOf(inst == $i)
	then
		retract($r);
end

rule "Disable facilities"
	when
		Bankrupt($i : inst)
		$f : Facility(inst == $i, active == true)
	then
		modify($f) {
			setActive(false);
		}
end

rule "Pay institution Costs"
	salience -10
	when
		$i : DataInstitution($r : payRole)
		$acc : Account(holder == $i, balance < 0, $bal : balance)
		accumulate( 
			RoleOf(inst == $i, role == $r, $a : actor); 
			$payers : collectSet($a);
			$payers.size() > 0)
	then
		logger.info($acc);
		double balanceDue = -1 * $bal / $payers.size();
		for(Object o : $payers) {
			Actor a = (Actor) o;
			insert( new Obl(a, new Transfer(a, $i, $i, balanceDue) ));
		}
end

declare FeeIssued
	actor : Actor
	source : Object
	t : int
end

rule "Institution Subscription Fee"
	when
		RoleOf($a : actor, $i : inst, $r : role)
		DataInstitution(this == $i, subscriptionFees.containsKey($r), $fees : subscriptionFees)
		T($t : t)
		not( FeeIssued($a, $i, $t;) )
	then
		if(((Double) $fees.get($r)) > 0) {
			insert( new Obl($a, new Transfer($a, $i, $i, (Double) $fees.get($r)) ) );
		}
		insert( new FeeIssued($a, $i, $t) );
end

rule "Pool appropriation fee"
	salience -10
	when
		RoleOf($a : actor, $i : inst, $r : role)
		$p : MeteredPool(inst == $i, appropriationFees.containsKey($r), $matcher : artifactMatcher, $fees : appropriationFees)
		T($t : t)
		Appropriate(t == $t, actor == $a, inst == $i)
		not( FeeIssued($a, $p, $t;) )
		accumulate( Appropriate($item : artifact, actor == $a, inst == $i, t == $t, $matcher.matches($item));
			$count : count($item); $count > 0)
	then
		if(((Double) $fees.get($r)) > 0) {
			insert( new Obl($a, new Transfer($a, $i, $i, ((Double) $fees.get($r)) * $count.doubleValue()) ) );
		}
		insert( new FeeIssued($a, $p, $t) );
end

rule "Institution margin"
	salience -100
	no-loop
	when
		$i : DataInstitution()
		T($t : t)
		accumulate( Transfer($q : amount, payee == $i, t > $t - 10); $income : sum( $q ))
		accumulate( Invoice( $q : amount, payer == $i, t > $t - 10); $expense : sum( $q ))
	then
		modify($i) {
			setProfit( ($income.doubleValue() - $expense.doubleValue()) / 10 );
		}
end
