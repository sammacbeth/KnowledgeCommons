import kc.DataInstitution
import kc.MeteredPool

import uk.ac.imperial.einst.T
import uk.ac.imperial.einst.Institution
import uk.ac.imperial.einst.access.RoleOf
import uk.ac.imperial.einst.ipower.Obl
import uk.ac.imperial.einst.micropay.Account
import uk.ac.imperial.einst.micropay.Transfer
import uk.ac.imperial.einst.resource.Appropriate
import uk.ac.imperial.einst.resource.Provision
import uk.ac.imperial.einst.resource.facility.Facility

import java.lang.Integer

global org.apache.log4j.Logger logger

declare Bankrupt
	inst : Institution
end

declare PaidInstCosts
	inst : Institution
	t : int
end

declare FeeIssued
	actor : Actor
	source : Object
	t : int
end

query isBankrupt(i)
	Bankrupt(i;)
end

query getProvisionPay(Institution i, Object artifact)
	MeteredPool(inst == i, artifactMatcher.matches(artifact), $pay : payOnProvision)
end

query getAppropriationFee(Institution i, Object artifact)
	MeteredPool(inst == i, artifactMatcher.matches(artifact), $fees : appropriationFees)
end

rule "Institution Bankruptcy"
	salience -100
	when
		$acc : Account(balance < minValue, $i : holder, holder instanceof Institution)
		not( Bankrupt($i;) )
	then
		logger.info($acc +" is bankrupt!");
		insert( new Bankrupt((Institution) $i));
		modify($acc) {
			setFrozen(true);
		}
end

rule "Revoke roles on bankruptcy"
	when
		Bankrupt($i : inst)
		$r : RoleOf(inst == $i)
	then
		retract($r);
end

rule "Disable facilities"
	when
		Bankrupt($i : inst)
		$f : Facility(inst == $i, active == true)
	then
		modify($f) {
			setActive(false);
		}
end

rule "Pay institution Costs"
	salience -10
	when
		$i : DataInstitution($r : payRoles)
		$acc : Account(holder == $i, balance < 0, $bal : balance)
		T($t : t)
		not( PaidInstCosts($i, $t;) )
		accumulate(
			Transfer( payee == $i, toPay > 0, $tp : toPay );
			$due : sum($tp))
		accumulate( 
			RoleOf(inst == $i, $r contains role, $a : actor); 
			$payers : collectSet($a);
			$payers.size() > 0)
	then
		double balanceDue = -1 * ($bal + $due.doubleValue()) / $payers.size();
		logger.info("Inst owed "+ $due +", balance "+ $bal);
		for(Object o : $payers) {
			Actor a = (Actor) o;
			insert( new Obl(a, new Transfer(a, $i, $i, balanceDue) ));
		}
		insert( new PaidInstCosts($i,$t) );
end

rule "Institution Subscription Fee"
	when
		RoleOf($a : actor, $i : inst, $r : role)
		DataInstitution(this == $i, subscriptionFees.containsKey($r), $fees : subscriptionFees)
		T($t : t)
		not( FeeIssued($a, $i, $t;) )
	then
		insert( new FeeIssued($a, $i, $t) );
		if(((Double) $fees.get($r)) > 0) {
			insert( new Obl($a, new Transfer($a, $i, $i, (Double) $fees.get($r)) ) );
		}
end

rule "Pool appropriation fee"
	salience -10
	when
		RoleOf($a : actor, $i : inst, $r : role)
		$p : MeteredPool(inst == $i, appropriationFees.containsKey($r), $matcher : artifactMatcher, $fees : appropriationFees)
		T($t : t)
		Appropriate(t == $t, actor == $a, inst == $i)
		not( FeeIssued($a, $p, $t;) )
		accumulate( Appropriate($item : artifact, actor == $a, inst == $i, t == $t, $matcher.matches($item));
			$count : count($item); $count > 0)
	then
		if(((Double) $fees.get($r)) > 0) {
			insert( new Obl($a, new Transfer($a, $i, $i, ((Double) $fees.get($r)) * $count.doubleValue()) ) );
		}
		insert( new FeeIssued($a, $p, $t) );
end

rule "Institution margin"
	salience -100
	no-loop
	when
		$i : DataInstitution()
		T($t : t, t>0)
		accumulate( $tr : Transfer($q : amount, payee == $i, t > $t - 5) and Cleared($tr;); $income : sum( $q ))
		accumulate( Invoice( $q : amount, payer == $i, t > $t - 5); $invoices : sum( $q ))
		accumulate( Transfer($q : amount, payer == $i, t > $t - 5); $transfers : sum($q ))
	then
		double profit = ($income.doubleValue() - $invoices.doubleValue() - $transfers.doubleValue()) / Math.min(5,$t);
		logger.info("In: " + $income + ", Out: ("+ $invoices + ","+ $transfers +"), Profit: " + profit);
		modify($i) {
			setProfit( profit );
		}
end

rule "Pay provider on appropriation"
	when
		T($t : t)
		$app : Appropriate(t == $t, $art : artifact, $i : inst, $appropriator : actor, valid == true)
		MeteredPool(inst == $i, payOnAppropriation > 0, artifacts contains $art, $pay : payOnAppropriation)
		Provision($provider : actor, inst == $i, artifact == $art, actor != $appropriator, valid == true)
		RoleOf(inst == $i, actor == $appropriator ) // appropriator has a role
		RoleOf(inst == $i, actor == $provider ) // provider has a role
		not( FeeIssued( $appropriator, $app, $t ;) )
	then
		logger.info("Pay "+ $provider +" "+ $pay + " for "+ $app); 
		Transfer trans = new Transfer($i, $provider, $pay);
		trans.setT($t);
		insert( trans );
		insert( new FeeIssued($appropriator, $app, $t) );
end

rule "Pay provider on provision"
	when
		T($t : t)
		$prov : Provision(t == $t, $art : artifact, $i : inst, $provider : actor, valid == true)
		MeteredPool(inst == $i, payOnProvision > 0, artifacts contains $art, $pay : payOnProvision)
		RoleOf(inst == $i, actor == $provider ) // provider has a role
		not( FeeIssued( $provider, $prov, $t ;) )
	then
		Transfer trans = new Transfer($i, $provider, $pay);
		trans.setT($t);
		insert( trans );
		insert( new FeeIssued($provider, $prov, $t) );
end

rule "Leave inst discards debts"
	when
		$t : Transfer($a : payer, $i : payee)
		not( Institution(this == $a) )
		not( exists( RoleOf(actor == $a, inst == $i ) ))
	then
		logger.info("Retract: "+ $t);
		retract($t);
end
